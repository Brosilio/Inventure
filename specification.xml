
<!-- ------------------- INVENTURE MARKUP LANGUAGE (IML) ------------------- -->
<!--
    Copyright (C) 2020 Brosilio
    MIT License
    https://github.com/brosilio/Inventure
    
    -- About --
    Inveture Markup Language (IML) is a XML-like markup language designed for
    making complex text adventure and choose-your-own story games.
 -->

<!-- --------------------------- File Information -------------------------- -->
<!--
    These Directives appear at the top of the file to tell the Inventure
    parser what it's dealing with.
    
    Directives are special statements. Their syntax is as follows:
        <!DIRECTIVE argument, argument>
    
    Unlike most other elements, Directives do not have a closing tag and do
    not require a forward-slash (/) before the closing angle bracket.
 -->

<!DOCTYPE inventure> <!-- For posterity, should come first     -->
<!VERSION 0.0.0>     <!-- The version of this document         -->
<!NAME storyhandler> <!-- The name of this document            -->
<!PARTIAL>           <!-- Indicate that this file is a partial -->


<!-- ------------------------------- Features ------------------------------ -->
<!--
    Feature Directives are used to tell the Inventure parser about what
    Features it needs to have in order for this IML file to work properly.
    
    A Feature as a native addon (plugin) to the Inventure parser that allows
    for enhanced functionality. Some are built-in to the Inventure parser,
    and these are always available. However, if you specify a custom Feature,
    the user must have that Feature installed. To make it easier to find
    custom features, you should specify the URL at which the custom Feature
    can be found. A good URL would be the Feature's GitHub repository.
    
    <!FEATURE> Directives are NOT allowed in IML files that have been marked
    with the <!PARTIAL> Directive.
    
    Syntax:
        <!FEATURE name>
    or, if it's a custom Feature:
        <!FEATURE name, "url">
 -->

<!-- FEATURE tells the Inventure interpreter it needs the requested plugin   -->
<!-- (feature) or else it will not work. and automatically 'imports' them.   -->
<!-- automatically 'imports' them. These 'features' are modifications to the -->
<!-- Inventure interpreter itself, and are implemented in native code.       -->
<!-- <!FEATURE> bricks are not allowed in <!PARTIAL> IML files.              -->
<!FEATURE browser>    <!-- This file needs to run in a browser               -->
<!FEATURE html>       <!-- This file needs HTML support                      -->
<!FEATURE javascript> <!-- This file uses JavaScript                         -->
<!FEATURE basic>      <!-- This file uses BASIC                              -->
<!FEATURE image>      <!-- This file will display images                     -->
<!FEATURE video>      <!-- This file will display video                      -->
<!FEATURE audio>      <!-- This file will play audio                         -->
<!FEATURE wget>       <!-- This file needs to fetch resources from the web   -->
<!FEATURE x-custom, "url"> <!-- This file needs a custom feature that the    -->
                           <!-- user can find at the specified url           -->


<!-- ----------------------------- Permissions ----------------------------- -->
<!--
    description
 -->

<!-- Permission bricks are required for the Inventure interpreter to perform -->
<!-- certain actions. The Inventure interpreter will prompt the user for     -->
<!-- access to the requested features. This is a security feature.           -->
<!-- If the user denies access to a PERMISSION, the Inventure interpreter    -->
<!-- will halt immediately.                                                  -->
<!PERMISSION sys.network >
<!PERMISSION env.username>
<!PERMISSION env.hostname>


<!-- ------------------------------- Includes ------------------------------ -->
<!--
    Allows you to <dive> into Inventure files, relative to this file's path
 -->
<!INCLUDE "chapter1.iml">
<!INCLUDE "chapter2.iml">


<!-- ------------------------------- Metadata ------------------------------ -->
<!--
    Meta tags serve no functional purpose other than to specify non-machine
	readable information about this file, such as author names or contact
	information.
 -->

<meta author ="billybobjoe"           />
<meta email  ="example@example.com"   />
<meta website="https://example.com"   />


<!-- ------------------------------ Variables ------------------------------ -->
<!-- 
    -- Accessing Variables --
    $varName in any param will evaluate to the value of that variable.
    Sometimes, the param accepts the *name* of a variable, not the value.
    IML defined <func>s can be called like this:
        @funcName('literal', 0.00, $variable)
-->

<!-- Setting Global Variables -->
<set name="value"          />
<set var="name" to="value" />

<!-- Setting Local Variables  -->
<let name="value"          />
<let var="name" be="value" />

<!-- Deleting Variables -->
<del var_name   />
<del var="name" />

<!-- Copying Variables  -->
<cpy from="varname" to="varname" />
<let var="name" be="$otherVar"   />
<set var="name" to="$otherVar"   />


<!-- --------------------------------- Math -------------------------------- -->
<!-- 
    By default, math operations will overwrite the 'var' param
    with the result of the operation. If you specify an 'out'
    param, the result will be stored there instead, and
    the original value will remain unmodified. Example below.
 -->

<math var='name' num="123" out="result_var" />

<!-- Will add 'num' to 'var' and store result in 'var' -->
<add var="name" num="123"       />
<add var="name" num="$some_var" />

<!-- Will subtract 'num' from 'var' and store result in 'var' -->
<sub var="name" num="123"       />
<sub var="name" num="$some_var" />

<!-- Will multiply 'var' by 'num' and store result in 'var' -->
<mul var="name" num="123"       />
<mul var="name" num="$some_var" />

<!-- Will divide 'var' by 'num' and store result in 'var' -->
<div var="name" num="123"       />
<div var="name" num="$some_var" />

<!-- Will raise 'var' to the power of 'num' and store result in 'var' -->
<pow var="name" num="123"       />
<pow var="name" num="$some_var" />

<!-- Will modulo 'var' with 'num' and store result in 'var' -->
<mod var="name" num="123"       />
<mod var="name" num="$some_var" />

<!-- Increments the var by 1 (or value specified in 'by') -->
<inc var="name" />
<inc var="name" by="123" />
<inc var="name" by="$some_var" />

<!-- Decrements the var by 1 (or value specified in 'by') -->
<dec var="name" />
<dec var="name" by="123" />
<dec var="name" by="$some_var" />


<!-- ------------------------------- Text I/O ------------------------------ -->
<!--
    description
 -->

<!-- Printing Plaintext -->
Welcome, Professor Falken.

<!-- Printing Variables -->
Welcome, <print text="$username"  />.
Welcome, <print text="@getName()" />.

<!-- Reading Plaintext From The User -->
<read into="number" mustbe="number" say="Type a number: "  />
<read into="var"    cantbe="empty"  say="Type something: " />
<read into="name"                   say="Type something: " />
<read into="name">Type something: </read>

<!-- Does not parse contents as Inventure and instructs parser to print -->
<raw type="html">

</raw>

<!-- --------------------------- Loops & Jumping --------------------------- -->
<!--
    description
 -->

<!-- Looping & setting iteration variable  -->
<loop times="10" iter="i">
    <!-- Local variable "i" can be accessed -->
    Loop iteration: <print local="i" />
</loop>

<!-- Sections, can be jumped to using <go> -->
<!-- name param is not required, but you can't jump to unnamed sections -->
<!-- sections have their own scope -->
<sec name="beginning">
</sec>

<!-- Safely goes to a named section - will continue where the section ends.  -->
<!-- Including the 'comeback' param will make force the interpreter to come  -->
<!-- back to this location, instead of continuing directly after the         -->
<!-- specified <sec>.                                                        -->
<go to="section name"          />
<go to="section name" comeback />

<!-- Defines a label that can be accessed with <jump> -->
<:label />

<!-- Jumps to a <:label>               -->
<!-- can have un-intended side-effects -->
<jump to="label"             />
<jump to="$varWithLabelName" />
<jump to="@findLabel()"      />

<!-- Jumps directly to a line number (includes comments + empty lines).      -->
<!-- If the location jumped to is in a different scope than this <linejump>  -->
<!-- then the Inventure parser will backtrack up the file until it can       -->
<!-- "safely" enter that scope. This is a terrible feature.                  -->
<linejump to="123"              />
<linejump to="$someNumericVar"  />
<linejump to="@calculateJump()" />

<!-- Conditionals -->
<!-- Syntax subject to change -->
<if var="name" meets="Karen" condition="=">
</if>

<!-- Run a script on the host -->
<!-- This feature may be removed -->
<script lang="BASIC">
</script>


<!-- -------------------------------- Debug -------------------------------- -->
<!--
    description
 -->

<!-- Throw an exception and let the Inventure parser choke on it -->
<exception reason="Something horrible has gone wrong" />

<!-- Debug blocks are only interpreted when debugging      -->
<!-- Debug mode is determined by the value of "sys.DEBUG"  -->
<dbg>
</dbg>

<!-- Log statements are printed to the interpreter console -->
<!-- (for example, the browser console)                    -->
<log text="Hello, world."      />
<log text="Value: $some_var"   />
<log text="@someFunc($someVar)"/>


<!-- ------------------------------ Functions ------------------------------ -->
<!--
    description
 -->
 
<!-- Can be called by a 'do' block -->
<!-- locals will have been copied from the caller 'do' scope -->
<!-- optionally can return the value of a local defined in the function's scope -->
<func name="function" />
</func ret="localvar">

<!-- Imports a function from an <!INCLUDE>'d IML file -->
<func name="doSomething" from="chapter1" />

<!-- Calls (jumps to) a function. Will jump back to this 'do' block when done. -->
<!-- locals defined here are copied into the callee's scope so they can be accessed -->
<do this="function" />
    <let something="value" />
    <let var="varname" be="value"/>
</do>

<!-- External-call a function from a feature -->
<!-- will use child locals as parameters for the call -->
<!-- will store return value in the variable specified in the 'ret' param -->
<!-- the 'ret' param will be the closest-scoped variable to the scope -->
<!-- the call was made in -->
<extern func="alert" from="browser" ret="some_var">
    <param text="Fuck you"     />
    <!-- or, maybe -->
    <param text="$some_global" />
    <!-- or, maybe -->
    <param name="$some_global" />
    
    <!-- can use 'out' if more than one value needs to be returned  -->
    <!-- 'from' is the value set by the feature function -->
    <!-- 'into' is where it gets copied -->
    <out from="" into="" />
</extern>


<!-- -------------------------------- System ------------------------------- -->
<!--
    description
 -->
 
<!-- Copy a system-set variable to a variable -->
<sys out="var_name" />

<!-- Instructs the Inventure parser to expunge everything and start from the top -->
<reboot />

<!-- Instructs the Inventure parser to halt -->
<!-- Exit code optional (default 0) -->
<exit />
<exit code="0" />

<!-- Takes the input 'src' and interprets it as IML -->
<!-- The interpreted scope will be the same as the scope the <eval> block is in -->
<!-- This may be dangerous -->
<eval src="[...some IML]" />
<eval src="$someIML"      />
<eval src="@getSomeIml()" />


<!-- -------------------------- Diving & Surfacing ------------------------- -->
<!--
    Diving & Surfacing are important features when writing stories. These
	features allow you to keep parts of your story in separate files.
 -->

<!-- Will "dive" into the specified IML file, using its programatic name.    -->
<!-- That file will be given the scope that this <dive> brick has.           -->
<!-- You cannot dive into an IML file that is further up the dive chain.     -->
<dive into="chapter1"       />
<dive into="$varDiveName"   />
<dive into="@getDiveName()" />

<!-- "Surfaces" back to the parent IML file at the location of the <dive>    -->
<!-- brick that initiated the dive, and continues interpreting from there.   -->
<!-- This is automatically done once the end-of-file has been reached for a  -->
<!-- document.                                                               -->
<surface />
